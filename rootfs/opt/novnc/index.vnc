<!-- index.vnc - default html page for Java VNC viewer applet.  On any file
     ending in .vnc, the HTTP server embedded in Xvnc will substitute the
     following variables when preceded by a dollar: USER, DESKTOP, DISPLAY,
     APPLETWIDTH, APPLETHEIGHT, WIDTH, HEIGHT, PORT, PARAMS.  Use two dollar
     signs ($$) to get a dollar sign in the generated html. -->

<!DOCTYPE html>
<html>
<head>

    <!--
    noVNC example: simple example using default UI
    Copyright (C) 2012 Joel Martin
    Copyright (C) 2013 Samuel Mannehed for Cendio AB
    noVNC is licensed under the MPL 2.0 (see LICENSE.txt)
    This file is licensed under the 2-Clause BSD license (see LICENSE.txt).

    Connect parameters are provided in query string:
        http://example.com/?host=HOST&port=PORT&encrypt=1&true_color=1
    or the fragment:
        http://example.com/#host=HOST&port=PORT&encrypt=1&true_color=1
    -->
    <title>$DESKTOP - noVNC</title>

    <meta charset="utf-8" />

    <!-- Always force latest IE rendering engine (even in intranet) & Chrome Frame
                Remove this if you use the .htaccess -->
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />

    <!-- Apple iOS Safari settings -->
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />
    <!-- App Start Icon  -->
    <link rel="apple-touch-startup-image" href="images/screen_320x460.png" />
    <!-- For iOS devices set the icon to use if user bookmarks app on their homescreen -->
    <link rel="apple-touch-icon" href="images/screen_57x57.png" />
    <!--
    <link rel="apple-touch-icon-precomposed" href="images/screen_57x57.png" />
    -->


    <!-- Stylesheets -->
    <link rel="stylesheet" href="include/base.css" title="plain">

    <!--
    <script type='text/javascript'
        src='http://getfirebug.com/releases/lite/1.2/firebug-lite-compressed.js'></script>
    -->
        <script src="include/util.js"></script>
</head>

<body style="margin: 0px;">
    <div id="noVNC_container">
            <div id="noVNC_status_bar" class="noVNC_status_bar" style="margin-top: 0px;">
                <table border=0 width="100%"><tr>
                    <td><div id="noVNC_status" style="position: relative; height: auto;">
                        Loading
                    </div></td>
                </tr></table>
            </div>
            <canvas id="noVNC_canvas" width="640px" height="20px">
                Canvas not supported.
            </canvas>
        </div>

        <script>
        /*jslint white: false */
        /*global window, $, Util, RFB, */
        "use strict";

        // Load supporting scripts
        Util.load_scripts(["webutil.js", "base64.js", "websock.js", "des.js",
                           "keysymdef.js", "keyboard.js", "input.js", "display.js",
                           "inflator.js", "rfb.js", "keysym.js"]);

        var rfb;
        var resizeTimeout;
        var tryFallbackPort = false;

        function UIresize() {
            if (WebUtil.getConfigVar('resize', false)) {
                var innerW = window.innerWidth;
                var innerH = window.innerHeight;
                var controlbarH = $D('noVNC_status_bar').offsetHeight;
                var padding = 5;
                if (innerW !== undefined && innerH !== undefined)
                    rfb.requestDesktopSize(innerW, innerH - controlbarH - padding);
            }
        }
        function FBUComplete(rfb, fbu) {
            UIresize();
            rfb.set_onFBUComplete(function() { });
        }
        function passwordRequired(rfb) {
            var msg;
            msg = '<form onsubmit="return setPassword();"';
            msg += '  style="margin-bottom: 0px">';
            msg += 'Password Required: ';
            msg += '<input type=password size=10 id="password_input" class="noVNC_status">';
            msg += '<\/form>';
            $D('noVNC_status_bar').setAttribute("class", "noVNC_status_warn");
            $D('noVNC_status').innerHTML = msg;
        }
        function setPassword() {
            rfb.sendPassword($D('password_input').value);
            return false;
        }
        function updateState(rfb, state, oldstate, msg) {
            var s, sb, level;
            s = $D('noVNC_status');
            sb = $D('noVNC_status_bar');
            switch (state) {
                case 'failed':       level = "error";  break;
                case 'fatal':        level = "error";  break;
                case 'normal':       level = "normal"; break;
                case 'disconnected': level = "normal"; break;
                case 'loaded':       level = "normal"; break;
                default:             level = "warn";   break;
            }

            if (state === "normal") {
            } else {
                xvpInit(0);
            }

            if (typeof(msg) !== 'undefined') {
                sb.setAttribute("class", "noVNC_status_" + level);
                s.textContent = msg;
            }

            if (state === "connected") {
                // We were able to connect.  No need to try the fallback port.
                tryFallbackPort = false;
            }
            else if (tryFallbackPort === true && oldstate == "failed" && state == "disconnected") {
                // Failed to connect.  Try the fallback port.
                console.info("RFB connection failure.  Attempting to connect using fallback port %s (current: %s).", $PORT, rfb._rfb_port);
                tryFallbackPort = false;
                rfb.connect(rfb._rfb_host, $PORT, rfb._rfb_password, rfb._rfb_path);
            }
        }

        window.onresize = function () {
            // When the window has been resized, wait until the size remains
            // the same for 0.5 seconds before sending the request for changing
            // the resolution of the session
            clearTimeout(resizeTimeout);
            resizeTimeout = setTimeout(function(){
                UIresize();
            }, 500);
        };

        function xvpInit(ver) {
            // Nothing to do.
        }

        window.onscriptsload = function () {
            var host, port, password, path, token;

            WebUtil.init_logging(WebUtil.getConfigVar('logging', 'warn'));
            //document.title = unescape(WebUtil.getConfigVar('title', 'noVNC'));

            // Get VNC server host.  By default, use the host of server that served this file.
            host = WebUtil.getConfigVar('host', window.location.hostname);
            // If there are at least two colons in there, it is likely an IPv6 address. Check for square brackets and add them if missing.
            if(host.search(/^.*:.*:.*$/) != -1) {
                if(host.charAt(0) != "[")
                    host = "[" + host;
                if(host.charAt(host.length-1) != "]")
                    host = host + "]";
            }

            // Get VNC server port.
            port = WebUtil.getConfigVar('port', '');
            if (!port) {
                // No VNC port specified.  Since we don't have the VNC port used
                // on the host, use the HTTP port of the server that served this
                // file + 100.  This comes from the x11vnc, where, by default:
                //     HTTP_PORT = VNC_PORT - 100
                // If the connection fails, then use the port x11vnc is
                // listening on (i.e. the port inside the container). See the
                // updateState() function.
                port = Number(window.location.port) + 100;
                tryFallbackPort = true;
            }

            // Get the VNC password.
            password = WebUtil.getConfigVar('password', '');

            // Get the path.
            path = WebUtil.getConfigVar('path', 'websockify');

            // If a token variable is passed in, set the parameter in a cookie.
            // This is used by nova-novncproxy.
            token = WebUtil.getConfigVar('token', null);
            if (token) {

                // if token is already present in the path we should use it
                path = WebUtil.injectParamIfMissing(path, "token", token);

                WebUtil.createCookie('token', token, 1)
            }

            if ((!host) || (!port)) {
                updateState(null, 'fatal', null, 'Must specify host and port in URL');
                return;
            }

            try {
                rfb = new RFB({'target':       $D('noVNC_canvas'),
                               'encrypt':      WebUtil.getConfigVar('encrypt',
                                        (window.location.protocol === "https:")),
                               'repeaterID':   WebUtil.getConfigVar('repeaterID', ''),
                               'true_color':   WebUtil.getConfigVar('true_color', true),
                               'local_cursor': WebUtil.getConfigVar('cursor', true),
                               'shared':       WebUtil.getConfigVar('shared', true),
                               'view_only':    WebUtil.getConfigVar('view_only', false),
                               'onUpdateState':  updateState,
                               'onXvpInit':    xvpInit,
                               'onPasswordRequired':  passwordRequired,
                               'onFBUComplete': FBUComplete});
            } catch (exc) {
                updateState(null, 'fatal', null, 'Unable to create RFB client -- ' + exc);
                return; // don't continue trying to connect
            }

            rfb.connect(host, port, password, path);
        };
        </script>

    </body>
</html>
