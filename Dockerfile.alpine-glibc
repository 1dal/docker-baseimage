#
# baseimage Dockerfile
#
# https://github.com/jlesage/docker-baseimage
#

# Pull base image.
FROM ${BASEIMAGE}

# Define software versions.
ARG S6_OVERLAY_VERSION=1.19.1.1

# Define software download URLs.
ARG S6_OVERLAY_URL=https://github.com/just-containers/s6-overlay/releases/download/v${S6_OVERLAY_VERSION}/s6-overlay-amd64.tar.gz

# Define GLIBC variables.
ARG ALPINE_GLIBC_PACKAGE_VERSION=2.25-r0
ARG ALPINE_GLIBC_LOCALE_INPUT=en_US
ARG ALPINE_GLIBC_LOCALE_CHARMAP=UTF-8
ARG ALPINE_GLIBC_LOCALE=${ALPINE_GLIBC_LOCALE_INPUT}.${ALPINE_GLIBC_LOCALE_CHARMAP}
ARG ALPINE_GLIBC_BASE_URL=https://github.com/sgerrand/alpine-pkg-glibc/releases/download
ARG ALPINE_GLIBC_BASE_PACKAGE_FILENAME=glibc-$ALPINE_GLIBC_PACKAGE_VERSION.apk
ARG ALPINE_GLIBC_BIN_PACKAGE_FILENAME=glibc-bin-$ALPINE_GLIBC_PACKAGE_VERSION.apk
ARG ALPINE_GLIBC_I18N_PACKAGE_FILENAME=glibc-i18n-$ALPINE_GLIBC_PACKAGE_VERSION.apk

# Define working directory.
WORKDIR /tmp

# Install GNU libc (aka glibc) and set en_US.UTF-8 locale as default.
RUN \
    apk --no-cache add --virtual build-dependencies wget ca-certificates && \
    wget \
        "https://raw.githubusercontent.com/andyshinn/alpine-pkg-glibc/master/sgerrand.rsa.pub" \
        -O "/etc/apk/keys/sgerrand.rsa.pub" && \
    wget \
        "$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BASE_PACKAGE_FILENAME" \
        "$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BIN_PACKAGE_FILENAME" \
        "$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_I18N_PACKAGE_FILENAME" && \
    apk add --no-cache \
        "$ALPINE_GLIBC_BASE_PACKAGE_FILENAME" \
        "$ALPINE_GLIBC_BIN_PACKAGE_FILENAME" \
        "$ALPINE_GLIBC_I18N_PACKAGE_FILENAME" && \
    # Generate locale.
    /usr/glibc-compat/bin/localedef --inputfile ${ALPINE_GLIBC_LOCALE_INPUT} \
                                    --charmap ${ALPINE_GLIBC_LOCALE_CHARMAP} \
                                    ${ALPINE_GLIBC_LOCALE} && \
    # Cleanup
    apk del glibc-i18n build-dependencies && \
    rm "/etc/apk/keys/sgerrand.rsa.pub" \
       "/root/.wget-hsts" \
       "$ALPINE_GLIBC_BASE_PACKAGE_FILENAME" \
       "$ALPINE_GLIBC_BIN_PACKAGE_FILENAME" \
       "$ALPINE_GLIBC_I18N_PACKAGE_FILENAME"

# Install s6 overlay.
RUN \
    apk --no-cache add --virtual build-dependencies curl && \
    curl -sS -L ${S6_OVERLAY_URL} | tar -xz -C / && \
    # Add the '-s' option to s6-svscan to use our signal handlers.
    sed -i.bak 's|^s6-svscan -t0 /var/run/s6/services$|s6-svscan -s -t0 /var/run/s6/services|' /etc/s6/init-catchall/init-stage1 && \
        rm /etc/s6/init-catchall/init-stage1.bak && \
    sed -i.bak 's|^s6-svscan -t0 /var/run/s6/services$|s6-svscan -s -t0 /var/run/s6/services|' /etc/s6/init-no-catchall/init-stage1 && \
        rm /etc/s6/init-no-catchall/init-stage1.bak && \
    # Add support for pre-finish scripts.
    sed -i.bak 's|forx i { "fix-attrs.d" "cont-init.d" "cont-finish.d" "services.d" }|forx i { "fix-attrs.d" "cont-init.d" "cont-finish.d" "cont-prefinish.d" "services.d" }|' /etc/s6/init/init-stage2 && \
        rm /etc/s6/init/init-stage2.bak && \
    # Cleanup
    apk --no-cache del build-dependencies

# Install system packages.
RUN \
    apk --no-cache add \
        # For timezone support
        tzdata \
        # For 'groupmod' command
        shadow

# Add files.
COPY rootfs/ /

# Set environment variables.
ENV LANG=${ALPINE_GLIBC_LOCALE} \
    S6_BEHAVIOUR_IF_STAGE2_FAILS=3 \
    USER_ID=1000 \
    GROUP_ID=1000 \
    APP_NAME=DockerApp \
    APP_USER=app

# Define mountable directories.
VOLUME ["/config"]

# Define default command.
# Use S6 overlay init system.
CMD ["/init"]

# Metadata.
LABEL \
      org.label-schema.name="baseimage" \
      org.label-schema.description="A minimal docker baseimage to ease creation of long-lived application containers" \
      org.label-schema.version="unknown" \
      org.label-schema.vcs-url="https://github.com/jlesage/docker-baseimage" \
      org.label-schema.schema-version="1.0"
