#
# baseimage-gui Dockerfile
#
# https://github.com/jlesage/docker-baseimage-gui
#

# Pull base image.
FROM ${BASEIMAGE}

# Define software versions.
ARG LIBVNCSERVER_VERSION=0.9.11
ARG X11VNC_VERSION=0.9.14-fixes
ARG NOVNC_VERSION=0.6.2-fixes
ARG S6_OVERLAY_VERSION=1.19.1.1

# Define software download URLs.
ARG LIBVNCSERVER_URL=https://github.com/jlesage/libvncserver/archive/LibVNCServer-${LIBVNCSERVER_VERSION}-fixes.tar.gz
ARG X11VNC_URL=https://github.com/jlesage/x11vnc/archive/${X11VNC_VERSION}.tar.gz
ARG NOVNC_URL=https://github.com/jlesage/novnc/archive/v${NOVNC_VERSION}.tar.gz
ARG S6_OVERLAY_URL=https://github.com/just-containers/s6-overlay/releases/download/v${S6_OVERLAY_VERSION}/s6-overlay-amd64.tar.gz

# Define GLIBC variables.
ARG ALPINE_GLIBC_PACKAGE_VERSION=2.25-r0
ARG ALPINE_GLIBC_LOCALE_INPUT=en_US
ARG ALPINE_GLIBC_LOCALE_CHARMAP=UTF-8
ARG ALPINE_GLIBC_LOCALE=${ALPINE_GLIBC_LOCALE_INPUT}.${ALPINE_GLIBC_LOCALE_CHARMAP}
ARG ALPINE_GLIBC_BASE_URL=https://github.com/sgerrand/alpine-pkg-glibc/releases/download
ARG ALPINE_GLIBC_BASE_PACKAGE_FILENAME=glibc-$ALPINE_GLIBC_PACKAGE_VERSION.apk
ARG ALPINE_GLIBC_BIN_PACKAGE_FILENAME=glibc-bin-$ALPINE_GLIBC_PACKAGE_VERSION.apk
ARG ALPINE_GLIBC_I18N_PACKAGE_FILENAME=glibc-i18n-$ALPINE_GLIBC_PACKAGE_VERSION.apk

# Define working directory.
WORKDIR /tmp

# Install GNU libc (aka glibc) and set en_US.UTF-8 locale as default.
RUN \
    apk --no-cache add --virtual build-dependencies wget ca-certificates && \
    wget \
        "https://raw.githubusercontent.com/andyshinn/alpine-pkg-glibc/master/sgerrand.rsa.pub" \
        -O "/etc/apk/keys/sgerrand.rsa.pub" && \
    wget \
        "$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BASE_PACKAGE_FILENAME" \
        "$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BIN_PACKAGE_FILENAME" \
        "$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_I18N_PACKAGE_FILENAME" && \
    apk add --no-cache \
        "$ALPINE_GLIBC_BASE_PACKAGE_FILENAME" \
        "$ALPINE_GLIBC_BIN_PACKAGE_FILENAME" \
        "$ALPINE_GLIBC_I18N_PACKAGE_FILENAME" && \
    # Generate locale.
    /usr/glibc-compat/bin/localedef --inputfile ${ALPINE_GLIBC_LOCALE_INPUT} \
                                    --charmap ${ALPINE_GLIBC_LOCALE_CHARMAP} \
                                    ${ALPINE_GLIBC_LOCALE} && \
    # Cleanup
    apk del glibc-i18n build-dependencies && \
    rm "/etc/apk/keys/sgerrand.rsa.pub" \
       "/root/.wget-hsts" \
       "$ALPINE_GLIBC_BASE_PACKAGE_FILENAME" \
       "$ALPINE_GLIBC_BIN_PACKAGE_FILENAME" \
       "$ALPINE_GLIBC_I18N_PACKAGE_FILENAME"

# Install s6 overlay.
RUN \
    apk --no-cache add --virtual build-dependencies curl && \
    curl -sS -L ${S6_OVERLAY_URL} | tar -xz -C / && \
    # Cleanup
    apk --no-cache del build-dependencies

# Install system packages.
RUN \
    apk --no-cache add \
        # For timezone support
        tzdata \
        # For 'groupmod' command
        shadow

# Compile x11vnc.
RUN \
    apk --no-cache add --virtual build-dependencies \
            curl \
            build-base \
            autoconf \
            automake \
            libtool \
            libx11-dev \
            libxtst-dev \
            libjpeg-turbo-dev \
            libpng-dev  \
            libxinerama-dev \
            libxdamage-dev \
            libxcomposite-dev \
            libxcursor-dev \
            libxrandr-dev \
            libxfixes-dev \
            libice-dev \
            openssl-dev && \
    # Download sources
    curl -sS -L ${LIBVNCSERVER_URL} | tar -xz && \
    curl -sS -L ${X11VNC_URL} | tar -xz && \
    # Compile libvncserver
    cd libvncserver-LibVNCServer-${LIBVNCSERVER_VERSION}-fixes && \
    ./autogen.sh --prefix=/tmp/install && \
    make install && \
    cd .. && \
    # Compile x11vnc
    cd x11vnc-${X11VNC_VERSION} && \
    autoreconf -v --install && \
    PKG_CONFIG_PATH=/tmp/install/lib/pkgconfig/ ./configure --prefix=/tmp/install --with-websockets && \
    make install && \
    cd .. && \
    # Install libraries
    cp -P install/lib/libvncserver.so* /usr/lib/ && \
    cp -P install/lib/libvncclient.so* /usr/lib/ && \
    # Install binaries
    cp install/bin/x11vnc /usr/bin/ && \
    # Cleanup
    apk --no-cache del build-dependencies && \
    rm -rf /tmp/*

# Install packages.
RUN \
    apk --no-cache add \
        # x11vnc dependencies
        libssl1.0 \
        libxtst \
        libxi \
        libjpeg-turbo \
        libxcomposite \
        # X virtual framebuffer display server
        xvfb \
        # Openbox window manager
        openbox \
        xsetroot \
        font-bitstream-100dpi

# Install noVNC.
RUN \
    apk --no-cache add --virtual build-dependencies curl && \
    curl -sS -L ${NOVNC_URL} | tar -xz && \
    mkdir -p /opt/novnc && \
    cp -R noVNC-${NOVNC_VERSION}/favicon.ico \
          noVNC-${NOVNC_VERSION}/images \
          noVNC-${NOVNC_VERSION}/include \
          /opt/novnc/ && \
    # Cleanup
    apk --no-cache del build-dependencies && \
    rm -rf /tmp/*

# Add files.
COPY rootfs/ /

# Set environment variables.
ENV HOME=/home/guiapp \
    LANG=${ALPINE_GLIBC_LOCALE} \
    S6_BEHAVIOUR_IF_STAGE2_FAILS=3 \
    USER_ID=1000 \
    GROUP_ID=1000 \
    APP_NAME=DockerApp \
    DISPLAY=:0 \
    DISPLAY_WIDTH=1024 \
    DISPLAY_HEIGHT=768

# Define mountable directories.
VOLUME ["/config"]

# Expose ports.
#   - 5800: VNC web interface
#   - 9500: VNC
EXPOSE 5800 9500

# Define default command.
# Use S6 overlay init system.
CMD ["/init"]

# Metadata.
LABEL \
      org.label-schema.name="baseimage-gui" \
      org.label-schema.description="A minimal docker baseimage to ease creation of X graphical application containers" \
      org.label-schema.version="unknown" \
      org.label-schema.vcs-url="https://github.com/jlesage/docker-baseimage-gui" \
      org.label-schema.schema-version="1.0"
